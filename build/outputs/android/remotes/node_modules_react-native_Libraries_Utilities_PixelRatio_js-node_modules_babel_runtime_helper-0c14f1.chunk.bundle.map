{"version":3,"file":"node_modules_react-native_Libraries_Utilities_PixelRatio_js-node_modules_babel_runtime_helper-0c14f1.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js","webpack:///./node_modules/react-native/Libraries/Utilities/Dimensions.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js","webpack:///./node_modules/react-native/Libraries/Utilities/PixelRatio.js","webpack:///./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js","webpack:///./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack:///./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack:///./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack:///./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport type {IEventEmitter} from '../vendor/emitter/EventEmitter';\n\n// FIXME: use typed events\ntype RCTDeviceEventDefinitions = $FlowFixMe;\n\n/**\n * Global EventEmitter used by the native platform to emit events to JavaScript.\n * Events are identified by globally unique event names.\n *\n * NativeModules that emit events should instead subclass `NativeEventEmitter`.\n */\nexport default (new EventEmitter(): IEventEmitter<RCTDeviceEventDefinitions>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeDeviceInfo, {\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n  type DimensionsPayload,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\nconst eventEmitter = new EventEmitter<{\n  change: [DimensionsPayload],\n}>();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsPayload;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preferred API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n   */\n  static get(dim: string): DisplayMetrics | DisplayMetricsAndroid {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<DimensionsPayload>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: 'change',\n    handler: Function,\n  ): EventSubscription {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    return eventEmitter.addListener(type, handler);\n  }\n}\n\nlet initialDims: ?$ReadOnly<DimensionsPayload> =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nif (!initialDims) {\n  // Subscribe before calling getConstants to make sure we don't miss any updates in between.\n  RCTDeviceEventEmitter.addListener(\n    'didUpdateDimensions',\n    (update: DimensionsPayload) => {\n      Dimensions.set(update);\n    },\n  );\n  initialDims = NativeDeviceInfo.getConstants().Dimensions;\n}\n\nDimensions.set(initialDims);\n\nmodule.exports = Dimensions;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../TurboModule/RCTExport';\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\n\nexport type DisplayMetricsAndroid = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n  densityDpi: number,\n|};\n\nexport type DisplayMetrics = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n|};\n\nexport type DimensionsPayload = {|\n  window?: DisplayMetrics,\n  screen?: DisplayMetrics,\n  windowPhysicalPixels?: DisplayMetricsAndroid,\n  screenPhysicalPixels?: DisplayMetricsAndroid,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => {|\n    +Dimensions: DimensionsPayload,\n    +isIPhoneX_deprecated?: boolean,\n  |};\n}\n\nconst NativeModule: Spec = TurboModuleRegistry.getEnforcing<Spec>('DeviceInfo');\nlet constants = null;\n\nconst NativeDeviceInfo = {\n  getConstants(): {|\n    +Dimensions: DimensionsPayload,\n    +isIPhoneX_deprecated?: boolean,\n  |} {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n    return constants;\n  },\n};\n\nexport default NativeDeviceInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Dimensions = require('./Dimensions');\n\n/**\n * PixelRatio class gives access to the device pixel density.\n *\n * ## Fetching a correctly sized image\n *\n * You should get a higher resolution image if you are on a high pixel density\n * device. A good rule of thumb is to multiply the size of the image you display\n * by the pixel ratio.\n *\n * ```\n * var image = getImage({\n *   width: PixelRatio.getPixelSizeForLayoutSize(200),\n *   height: PixelRatio.getPixelSizeForLayoutSize(100),\n * });\n * <Image source={image} style={{width: 200, height: 100}} />\n * ```\n *\n * ## Pixel grid snapping\n *\n * In iOS, you can specify positions and dimensions for elements with arbitrary\n * precision, for example 29.674825. But, ultimately the physical display only\n * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334\n * for iPhone 6. iOS tries to be as faithful as possible to the user value by\n * spreading one original pixel into multiple ones to trick the eye. The\n * downside of this technique is that it makes the resulting element look\n * blurry.\n *\n * In practice, we found out that developers do not want this feature and they\n * have to work around it by doing manual rounding in order to avoid having\n * blurry elements. In React Native, we are rounding all the pixels\n * automatically.\n *\n * We have to be careful when to do this rounding. You never want to work with\n * rounded and unrounded values at the same time as you're going to accumulate\n * rounding errors. Having even one rounding error is deadly because a one\n * pixel border may vanish or be twice as big.\n *\n * In React Native, everything in JavaScript and within the layout engine works\n * with arbitrary precision numbers. It's only when we set the position and\n * dimensions of the native element on the main thread that we round. Also,\n * rounding is done relative to the root rather than the parent, again to avoid\n * accumulating rounding errors.\n *\n */\nclass PixelRatio {\n  /**\n   * Returns the device pixel density. Some examples:\n   *\n   *   - PixelRatio.get() === 1\n   *     - mdpi Android devices (160 dpi)\n   *   - PixelRatio.get() === 1.5\n   *     - hdpi Android devices (240 dpi)\n   *   - PixelRatio.get() === 2\n   *     - iPhone 4, 4S\n   *     - iPhone 5, 5c, 5s\n   *     - iPhone 6\n   *     - iPhone 7\n   *     - iPhone 8\n   *     - iPhone SE\n   *     - xhdpi Android devices (320 dpi)\n   *   - PixelRatio.get() === 3\n   *     - iPhone 6 Plus\n   *     - iPhone 7 Plus\n   *     - iPhone 8 Plus\n   *     - iPhone X\n   *     - xxhdpi Android devices (480 dpi)\n   *   - PixelRatio.get() === 3.5\n   *     - Nexus 6\n   */\n  static get(): number {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the\n   * absolute font size, so any elements that heavily depend on that should use this to do\n   * calculations.\n   *\n   * If a font scale is not set, this returns the device pixel ratio.\n   *\n   * This reflects the user preference set in:\n   *  - Settings > Display > Font size on Android,\n   *  - Settings > Display & Brightness > Text Size on iOS.\n   */\n  static getFontScale(): number {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   *\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize: number): number {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize: number): number {\n    const ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n  // No-op for iOS, but used on the web. Should not be documented.\n  static startDetecting() {}\n}\n\nmodule.exports = PixelRatio;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    const registrations = allocate(this._registry, eventType);\n    const registration: Registration<$ElementType<TEventToArgsMap, TEvent>> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    const registrations: ?Set<\n      Registration<$ElementType<TEventToArgsMap, TEvent>>,\n    > = this._registry[eventType];\n    if (registrations != null) {\n      for (const registration of [...registrations]) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this._registry = {};\n    } else {\n      delete this._registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this._registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: $ElementType<TEventToArgsMap, TEvent>,\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithHoles = require(\"./arrayWithHoles.js\");\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableRest = require(\"./nonIterableRest.js\");\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["EventEmitter","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dim","invariant","dims","screen","window","windowPhysicalPixels","width","scale","height","fontScale","screenPhysicalPixels","emit","type","handler","addListener","initialDims","global","nativeExtensions","DeviceInfo","RCTDeviceEventEmitter","update","set","NativeDeviceInfo","getConstants","module","exports","NativeModule","TurboModuleRegistry","getEnforcing","constants","require","PixelRatio","get","layoutSize","Math","round","ratio","_registry","eventType","listener","context","registrations","allocate","registration","remove","delete","add","args","apply","size","registry","Set"],"sourceRoot":""}