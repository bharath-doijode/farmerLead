{"version":3,"file":"vendors-node_modules_react-native_Libraries_Components_TextInput_TextInputState_js-node_modul-182a3d.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/Components/TextInput/AndroidTextInputNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/RCTSingelineTextInputNativeComponent.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js","webpack:///./node_modules/react-native/Libraries/Components/TextInput/TextInputState.js","webpack:///./node_modules/react-native/Libraries/Utilities/differ/deepDiffer.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {\n  BubblingEventHandler,\n  DirectEventHandler,\n  Double,\n  Float,\n  Int32,\n  WithDefault,\n} from '../../Types/CodegenTypes';\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport type {\n  TextStyleProp,\n  ViewStyleProp,\n  ColorValue,\n} from '../../StyleSheet/StyleSheet';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport type {TextInputNativeCommands} from './TextInputNativeCommands';\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  | 'url'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type NativeProps = $ReadOnly<{|\n  // This allows us to inherit everything from ViewProps except for style (see below)\n  // This must be commented for Fabric codegen to work.\n  ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,\n\n  /**\n   * Android props after this\n   */\n  /**\n   * Specifies autocomplete hints for the system, so it can provide autofill. On Android, the system will always attempt to offer autofill by using heuristics to identify the type of content.\n   * To disable autocomplete, set `autoComplete` to `off`.\n   *\n   * *Android Only*\n   *\n   * Possible values for `autoComplete` are:\n   *\n   * - `birthdate-day`\n   * - `birthdate-full`\n   * - `birthdate-month`\n   * - `birthdate-year`\n   * - `cc-csc`\n   * - `cc-exp`\n   * - `cc-exp-day`\n   * - `cc-exp-month`\n   * - `cc-exp-year`\n   * - `cc-number`\n   * - `email`\n   * - `gender`\n   * - `name`\n   * - `name-family`\n   * - `name-given`\n   * - `name-middle`\n   * - `name-middle-initial`\n   * - `name-prefix`\n   * - `name-suffix`\n   * - `password`\n   * - `password-new`\n   * - `postal-address`\n   * - `postal-address-country`\n   * - `postal-address-extended`\n   * - `postal-address-extended-postal-code`\n   * - `postal-address-locality`\n   * - `postal-address-region`\n   * - `postal-code`\n   * - `street-address`\n   * - `sms-otp`\n   * - `tel`\n   * - `tel-country-code`\n   * - `tel-national`\n   * - `tel-device`\n   * - `username`\n   * - `username-new`\n   * - `off`\n   *\n   * @platform android\n   */\n  autoComplete?: WithDefault<\n    | 'birthdate-day'\n    | 'birthdate-full'\n    | 'birthdate-month'\n    | 'birthdate-year'\n    | 'cc-csc'\n    | 'cc-exp'\n    | 'cc-exp-day'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-number'\n    | 'email'\n    | 'gender'\n    | 'name'\n    | 'name-family'\n    | 'name-given'\n    | 'name-middle'\n    | 'name-middle-initial'\n    | 'name-prefix'\n    | 'name-suffix'\n    | 'password'\n    | 'password-new'\n    | 'postal-address'\n    | 'postal-address-country'\n    | 'postal-address-extended'\n    | 'postal-address-extended-postal-code'\n    | 'postal-address-locality'\n    | 'postal-address-region'\n    | 'postal-code'\n    | 'street-address'\n    | 'sms-otp'\n    | 'tel'\n    | 'tel-country-code'\n    | 'tel-national'\n    | 'tel-device'\n    | 'username'\n    | 'username-new'\n    | 'off',\n    'off',\n  >,\n\n  /**\n   * Sets the return key to the label. Use it instead of `returnKeyType`.\n   * @platform android\n   */\n  returnKeyLabel?: ?string,\n\n  /**\n   * Sets the number of lines for a `TextInput`. Use it with multiline set to\n   * `true` to be able to fill the lines.\n   * @platform android\n   */\n  numberOfLines?: ?Int32,\n\n  /**\n   * When `false`, if there is a small amount of space available around a text input\n   * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n   * the text inside of a full screen text input mode. When `true`, this feature is\n   * disabled and users will always edit the text directly inside of the text input.\n   * Defaults to `false`.\n   * @platform android\n   */\n  disableFullscreenUI?: ?boolean,\n\n  /**\n   * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n   * The default value is `simple`.\n   * @platform android\n   */\n  textBreakStrategy?: WithDefault<\n    'simple' | 'highQuality' | 'balanced',\n    'simple',\n  >,\n\n  /**\n   * The color of the `TextInput` underline.\n   * @platform android\n   */\n  underlineColorAndroid?: ?ColorValue,\n\n  /**\n   * If defined, the provided image resource will be rendered on the left.\n   * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n   * like\n   * ```\n   * <TextInput\n   *  inlineImageLeft='search_icon'\n   * />\n   * ```\n   * @platform android\n   */\n  inlineImageLeft?: ?string,\n\n  /**\n   * Padding between the inline image, if any, and the text input itself.\n   * @platform android\n   */\n  inlineImagePadding?: ?Int32,\n\n  importantForAutofill?: string /*?(\n    | 'auto'\n    | 'no'\n    | 'noExcludeDescendants'\n    | 'yes'\n    | 'yesExcludeDescendants'\n  ),*/,\n\n  /**\n   * When `false`, it will prevent the soft keyboard from showing when the field is focused.\n   * Defaults to `true`.\n   */\n  showSoftInputOnFocus?: ?boolean,\n\n  /**\n   * TextInput props after this\n   */\n  /**\n   * Can tell `TextInput` to automatically capitalize certain characters.\n   *\n   * - `characters`: all characters.\n   * - `words`: first letter of each word.\n   * - `sentences`: first letter of each sentence (*default*).\n   * - `none`: don't auto capitalize anything.\n   */\n  autoCapitalize?: WithDefault<\n    'none' | 'sentences' | 'words' | 'characters',\n    'none',\n  >,\n\n  /**\n   * If `false`, disables auto-correct. The default value is `true`.\n   */\n  autoCorrect?: ?boolean,\n\n  /**\n   * If `true`, focuses the input on `componentDidMount`.\n   * The default value is `false`.\n   */\n  autoFocus?: ?boolean,\n\n  /**\n   * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n   * default is `true`.\n   */\n  allowFontScaling?: ?boolean,\n\n  /**\n   * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\n   * Possible values:\n   * `null/undefined` (default): inherit from the parent node or the global default (0)\n   * `0`: no max, ignore parent/global default\n   * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\n   */\n  maxFontSizeMultiplier?: ?Float,\n\n  /**\n   * If `false`, text is not editable. The default value is `true`.\n   */\n  editable?: ?boolean,\n\n  /**\n   * Determines which keyboard to open, e.g.`numeric`.\n   *\n   * The following values work across platforms:\n   *\n   * - `default`\n   * - `numeric`\n   * - `number-pad`\n   * - `decimal-pad`\n   * - `email-address`\n   * - `phone-pad`\n   * - `url`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `visible-password`\n   */\n  keyboardType?: WithDefault<KeyboardType, 'default'>,\n\n  /**\n   * Determines how the return key should look. On Android you can also use\n   * `returnKeyLabel`.\n   *\n   * *Cross platform*\n   *\n   * The following values work across platforms:\n   *\n   * - `done`\n   * - `go`\n   * - `next`\n   * - `search`\n   * - `send`\n   *\n   * *Android Only*\n   *\n   * The following values work on Android only:\n   *\n   * - `none`\n   * - `previous`\n   */\n  returnKeyType?: WithDefault<ReturnKeyType, 'done'>,\n\n  /**\n   * Limits the maximum number of characters that can be entered. Use this\n   * instead of implementing the logic in JS to avoid flicker.\n   */\n  maxLength?: ?Int32,\n\n  /**\n   * If `true`, the text input can be multiple lines.\n   * The default value is `false`.\n   */\n  multiline?: ?boolean,\n\n  /**\n   * Callback that is called when the text input is blurred.\n   * `target` is the reactTag of the element\n   */\n  onBlur?: ?BubblingEventHandler<$ReadOnly<{|target: Int32|}>>,\n\n  /**\n   * Callback that is called when the text input is focused.\n   * `target` is the reactTag of the element\n   */\n  onFocus?: ?BubblingEventHandler<$ReadOnly<{|target: Int32|}>>,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   * `target` is the reactTag of the element\n   * TODO: differentiate between onChange and onChangeText\n   */\n  onChange?: ?BubblingEventHandler<\n    $ReadOnly<{|target: Int32, eventCount: Int32, text: string|}>,\n  >,\n\n  /**\n   * Callback that is called when the text input's text changes.\n   * Changed text is passed as an argument to the callback handler.\n   * TODO: differentiate between onChange and onChangeText\n   */\n  onChangeText?: ?BubblingEventHandler<\n    $ReadOnly<{|target: Int32, eventCount: Int32, text: string|}>,\n  >,\n\n  /**\n   * Callback that is called when the text input's content size changes.\n   * This will be called with\n   * `{ nativeEvent: { contentSize: { width, height } } }`.\n   *\n   * Only called for multiline text inputs.\n   */\n  onContentSizeChange?: ?DirectEventHandler<\n    $ReadOnly<{|\n      target: Int32,\n      contentSize: $ReadOnly<{|width: Double, height: Double|}>,\n    |}>,\n  >,\n\n  onTextInput?: ?BubblingEventHandler<\n    $ReadOnly<{|\n      target: Int32,\n      text: string,\n      previousText: string,\n      range: $ReadOnly<{|start: Double, end: Double|}>,\n    |}>,\n  >,\n\n  /**\n   * Callback that is called when text input ends.\n   */\n  onEndEditing?: ?BubblingEventHandler<\n    $ReadOnly<{|target: Int32, text: string|}>,\n  >,\n\n  /**\n   * Callback that is called when the text input selection is changed.\n   * This will be called with\n   * `{ nativeEvent: { selection: { start, end } } }`.\n   */\n  onSelectionChange?: ?DirectEventHandler<\n    $ReadOnly<{|\n      target: Int32,\n      selection: $ReadOnly<{|start: Double, end: Double|}>,\n    |}>,\n  >,\n\n  /**\n   * Callback that is called when the text input's submit button is pressed.\n   * Invalid if `multiline={true}` is specified.\n   */\n  onSubmitEditing?: ?BubblingEventHandler<\n    $ReadOnly<{|target: Int32, text: string|}>,\n  >,\n\n  /**\n   * Callback that is called when a key is pressed.\n   * This will be called with `{ nativeEvent: { key: keyValue } }`\n   * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n   * the typed-in character otherwise including `' '` for space.\n   * Fires before `onChange` callbacks.\n   */\n  onKeyPress?: ?BubblingEventHandler<$ReadOnly<{|target: Int32, key: string|}>>,\n\n  /**\n   * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n   * May also contain other properties from ScrollEvent but on Android contentSize\n   * is not provided for performance reasons.\n   */\n  onScroll?: ?DirectEventHandler<\n    $ReadOnly<{|\n      target: Int32,\n      responderIgnoreScroll: boolean,\n      contentInset: $ReadOnly<{|\n        top: Double, // always 0 on Android\n        bottom: Double, // always 0 on Android\n        left: Double, // always 0 on Android\n        right: Double, // always 0 on Android\n      |}>,\n      contentOffset: $ReadOnly<{|\n        x: Double,\n        y: Double,\n      |}>,\n      contentSize: $ReadOnly<{|\n        width: Double, // always 0 on Android\n        height: Double, // always 0 on Android\n      |}>,\n      layoutMeasurement: $ReadOnly<{|\n        width: Double,\n        height: Double,\n      |}>,\n      velocity: $ReadOnly<{|\n        x: Double, // always 0 on Android\n        y: Double, // always 0 on Android\n      |}>,\n    |}>,\n  >,\n\n  /**\n   * The string that will be rendered before text input has been entered.\n   */\n  placeholder?: ?Stringish,\n\n  /**\n   * The text color of the placeholder string.\n   */\n  placeholderTextColor?: ?ColorValue,\n\n  /**\n   * If `true`, the text input obscures the text entered so that sensitive text\n   * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n   */\n  secureTextEntry?: ?boolean,\n\n  /**\n   * The highlight and cursor color of the text input.\n   */\n  selectionColor?: ?ColorValue,\n\n  /**\n   * The start and end of the text input's selection. Set start and end to\n   * the same value to position the cursor.\n   */\n  selection?: ?$ReadOnly<{|\n    start: Int32,\n    end?: ?Int32,\n  |}>,\n\n  /**\n   * The value to show for the text input. `TextInput` is a controlled\n   * component, which means the native value will be forced to match this\n   * value prop if provided. For most uses, this works great, but in some\n   * cases this may cause flickering - one common cause is preventing edits\n   * by keeping value the same. In addition to simply setting the same value,\n   * either set `editable={false}`, or set/update `maxLength` to prevent\n   * unwanted edits without flicker.\n   */\n  value?: ?string,\n\n  /**\n   * Provides an initial value that will change when the user starts typing.\n   * Useful for simple use-cases where you do not want to deal with listening\n   * to events and updating the value prop to keep the controlled state in sync.\n   */\n  defaultValue?: ?string,\n\n  /**\n   * If `true`, all text will automatically be selected on focus.\n   */\n  selectTextOnFocus?: ?boolean,\n\n  /**\n   * If `true`, the text field will blur when submitted.\n   * The default value is true for single-line fields and false for\n   * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n   * to `true` means that pressing return will blur the field and trigger the\n   * `onSubmitEditing` event instead of inserting a newline into the field.\n   */\n  blurOnSubmit?: ?boolean,\n\n  /**\n   * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n   *\n   * - `borderLeftWidth`\n   * - `borderTopWidth`\n   * - `borderRightWidth`\n   * - `borderBottomWidth`\n   * - `borderTopLeftRadius`\n   * - `borderTopRightRadius`\n   * - `borderBottomRightRadius`\n   * - `borderBottomLeftRadius`\n   *\n   * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n   * for more detail.\n   *\n   * [Styles](docs/style.html)\n   */\n  // TODO: figure out what to do with this style prop for codegen/Fabric purposes\n  // This must be commented for Fabric codegen to work; it's currently not possible\n  // to override the default View style prop in codegen.\n  style?: ?TextStyleProp,\n\n  /**\n   * If `true`, caret is hidden. The default value is `false`.\n   * This property is supported only for single-line TextInput component on iOS.\n   */\n  caretHidden?: ?boolean,\n\n  /*\n   * If `true`, contextMenuHidden is hidden. The default value is `false`.\n   */\n  contextMenuHidden?: ?boolean,\n\n  /**\n   * The following are props that `BaseTextShadowNode` takes. It is unclear if they\n   * are used by TextInput.\n   */\n  textShadowColor?: ?ColorValue,\n  textShadowRadius?: ?Float,\n  textDecorationLine?: ?string,\n  fontStyle?: ?string,\n  textShadowOffset?: ?$ReadOnly<{|width?: ?Double, height?: ?Double|}>,\n  lineHeight?: ?Float,\n  textTransform?: ?string,\n  color?: ?Int32,\n  letterSpacing?: ?Float,\n  fontSize?: ?Float,\n  textAlign?: ?string,\n  includeFontPadding?: ?boolean,\n  fontWeight?: ?string,\n  fontFamily?: ?string,\n\n  /**\n   * I cannot find where these are defined but JS complains without them.\n   */\n  textAlignVertical?: ?string,\n  cursorColor?: ?ColorValue,\n\n  /**\n   * \"Private\" fields used by TextInput.js and not users of this component directly\n   */\n  mostRecentEventCount: Int32,\n  text?: ?string,\n|}>;\n\ntype NativeType = HostComponent<NativeProps>;\n\ntype NativeCommands = TextInputNativeCommands<NativeType>;\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection'],\n});\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {\n  uiViewClassName: 'AndroidTextInput',\n  bubblingEventTypes: {\n    topBlur: {\n      phasedRegistrationNames: {\n        bubbled: 'onBlur',\n        captured: 'onBlurCapture',\n      },\n    },\n    topEndEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onEndEditing',\n        captured: 'onEndEditingCapture',\n      },\n    },\n    topFocus: {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture',\n      },\n    },\n    topKeyPress: {\n      phasedRegistrationNames: {\n        bubbled: 'onKeyPress',\n        captured: 'onKeyPressCapture',\n      },\n    },\n    topSubmitEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onSubmitEditing',\n        captured: 'onSubmitEditingCapture',\n      },\n    },\n    topTextInput: {\n      phasedRegistrationNames: {\n        bubbled: 'onTextInput',\n        captured: 'onTextInputCapture',\n      },\n    },\n  },\n  directEventTypes: {\n    topScroll: {\n      registrationName: 'onScroll',\n    },\n  },\n  validAttributes: {\n    maxFontSizeMultiplier: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    autoFocus: true,\n    placeholder: true,\n    inlineImagePadding: true,\n    contextMenuHidden: true,\n    textShadowColor: {process: require('../../StyleSheet/processColor')},\n    maxLength: true,\n    selectTextOnFocus: true,\n    textShadowRadius: true,\n    underlineColorAndroid: {\n      process: require('../../StyleSheet/processColor'),\n    },\n    textDecorationLine: true,\n    blurOnSubmit: true,\n    textAlignVertical: true,\n    fontStyle: true,\n    textShadowOffset: true,\n    selectionColor: {process: require('../../StyleSheet/processColor')},\n    selection: true,\n    placeholderTextColor: {process: require('../../StyleSheet/processColor')},\n    importantForAutofill: true,\n    lineHeight: true,\n    textTransform: true,\n    returnKeyType: true,\n    keyboardType: true,\n    multiline: true,\n    color: {process: require('../../StyleSheet/processColor')},\n    autoComplete: true,\n    numberOfLines: true,\n    letterSpacing: true,\n    returnKeyLabel: true,\n    fontSize: true,\n    onKeyPress: true,\n    cursorColor: {process: require('../../StyleSheet/processColor')},\n    text: true,\n    showSoftInputOnFocus: true,\n    textAlign: true,\n    autoCapitalize: true,\n    autoCorrect: true,\n    caretHidden: true,\n    secureTextEntry: true,\n    textBreakStrategy: true,\n    onScroll: true,\n    onContentSizeChange: true,\n    disableFullscreenUI: true,\n    includeFontPadding: true,\n    fontWeight: true,\n    fontFamily: true,\n    allowFontScaling: true,\n    onSelectionChange: true,\n    mostRecentEventCount: true,\n    inlineImageLeft: true,\n    editable: true,\n    fontVariant: true,\n    borderBottomRightRadius: true,\n    borderBottomColor: {process: require('../../StyleSheet/processColor')},\n    borderRadius: true,\n    borderRightColor: {process: require('../../StyleSheet/processColor')},\n    borderColor: {process: require('../../StyleSheet/processColor')},\n    borderTopRightRadius: true,\n    borderStyle: true,\n    borderBottomLeftRadius: true,\n    borderLeftColor: {process: require('../../StyleSheet/processColor')},\n    borderTopLeftRadius: true,\n    borderTopColor: {process: require('../../StyleSheet/processColor')},\n  },\n};\n\nlet AndroidTextInputNativeComponent = NativeComponentRegistry.get<NativeProps>(\n  'AndroidTextInput',\n  () => __INTERNAL_VIEW_CONFIG,\n);\n\n// flowlint-next-line unclear-type:off\nexport default ((AndroidTextInputNativeComponent: any): HostComponent<NativeProps>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../../Renderer/shims/ReactNativeTypes';\nimport codegenNativeCommands from '../../Utilities/codegenNativeCommands';\nimport type {TextInputNativeCommands} from './TextInputNativeCommands';\nimport RCTTextInputViewConfig from './RCTTextInputViewConfig';\nimport * as NativeComponentRegistry from '../../NativeComponent/NativeComponentRegistry';\n\ntype NativeType = HostComponent<mixed>;\n\ntype NativeCommands = TextInputNativeCommands<NativeType>;\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['focus', 'blur', 'setTextAndSelection'],\n});\n\nexport const __INTERNAL_VIEW_CONFIG: PartialViewConfig = {\n  uiViewClassName: 'RCTSinglelineTextInputView',\n  ...RCTTextInputViewConfig,\n};\n\nconst SinglelineTextInputNativeComponent: HostComponent<mixed> =\n  NativeComponentRegistry.get<mixed>(\n    'RCTSinglelineTextInputView',\n    () => __INTERNAL_VIEW_CONFIG,\n  );\n\n// flowlint-next-line unclear-type:off\nexport default ((SinglelineTextInputNativeComponent: any): HostComponent<mixed>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PartialViewConfig} from '../../Renderer/shims/ReactNativeTypes';\nimport {ConditionallyIgnoredEventHandlers} from '../../NativeComponent/ViewConfigIgnore';\n\ntype PartialViewConfigWithoutName = $Rest<\n  PartialViewConfig,\n  {uiViewClassName: string},\n>;\n\nconst RCTTextInputViewConfig = {\n  bubblingEventTypes: {\n    topBlur: {\n      phasedRegistrationNames: {\n        bubbled: 'onBlur',\n        captured: 'onBlurCapture',\n      },\n    },\n    topChange: {\n      phasedRegistrationNames: {\n        bubbled: 'onChange',\n        captured: 'onChangeCapture',\n      },\n    },\n    topContentSizeChange: {\n      phasedRegistrationNames: {\n        captured: 'onContentSizeChangeCapture',\n        bubbled: 'onContentSizeChange',\n      },\n    },\n    topEndEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onEndEditing',\n        captured: 'onEndEditingCapture',\n      },\n    },\n    topFocus: {\n      phasedRegistrationNames: {\n        bubbled: 'onFocus',\n        captured: 'onFocusCapture',\n      },\n    },\n    topKeyPress: {\n      phasedRegistrationNames: {\n        bubbled: 'onKeyPress',\n        captured: 'onKeyPressCapture',\n      },\n    },\n    topSubmitEditing: {\n      phasedRegistrationNames: {\n        bubbled: 'onSubmitEditing',\n        captured: 'onSubmitEditingCapture',\n      },\n    },\n    topTouchCancel: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchCancel',\n        captured: 'onTouchCancelCapture',\n      },\n    },\n    topTouchEnd: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchEnd',\n        captured: 'onTouchEndCapture',\n      },\n    },\n\n    topTouchMove: {\n      phasedRegistrationNames: {\n        bubbled: 'onTouchMove',\n        captured: 'onTouchMoveCapture',\n      },\n    },\n  },\n  directEventTypes: {\n    topTextInput: {\n      registrationName: 'onTextInput',\n    },\n    topKeyPressSync: {\n      registrationName: 'onKeyPressSync',\n    },\n    topScroll: {\n      registrationName: 'onScroll',\n    },\n    topSelectionChange: {\n      registrationName: 'onSelectionChange',\n    },\n    topChangeSync: {\n      registrationName: 'onChangeSync',\n    },\n  },\n  validAttributes: {\n    fontSize: true,\n    fontWeight: true,\n    fontVariant: true,\n    // flowlint-next-line untyped-import:off\n    textShadowOffset: {diff: require('../../Utilities/differ/sizesDiffer')},\n    allowFontScaling: true,\n    fontStyle: true,\n    textTransform: true,\n    textAlign: true,\n    fontFamily: true,\n    lineHeight: true,\n    isHighlighted: true,\n    writingDirection: true,\n    textDecorationLine: true,\n    textShadowRadius: true,\n    letterSpacing: true,\n    textDecorationStyle: true,\n    textDecorationColor: {process: require('../../StyleSheet/processColor')},\n    color: {process: require('../../StyleSheet/processColor')},\n    maxFontSizeMultiplier: true,\n    textShadowColor: {process: require('../../StyleSheet/processColor')},\n    editable: true,\n    inputAccessoryViewID: true,\n    caretHidden: true,\n    enablesReturnKeyAutomatically: true,\n    placeholderTextColor: {process: require('../../StyleSheet/processColor')},\n    clearButtonMode: true,\n    keyboardType: true,\n    selection: true,\n    returnKeyType: true,\n    blurOnSubmit: true,\n    mostRecentEventCount: true,\n    scrollEnabled: true,\n    selectionColor: {process: require('../../StyleSheet/processColor')},\n    contextMenuHidden: true,\n    secureTextEntry: true,\n    placeholder: true,\n    autoCorrect: true,\n    multiline: true,\n    textContentType: true,\n    maxLength: true,\n    autoCapitalize: true,\n    keyboardAppearance: true,\n    passwordRules: true,\n    spellCheck: true,\n    selectTextOnFocus: true,\n    text: true,\n    clearTextOnFocus: true,\n    showSoftInputOnFocus: true,\n    autoFocus: true,\n    ...ConditionallyIgnoredEventHandlers({\n      onChange: true,\n      onSelectionChange: true,\n      onContentSizeChange: true,\n      onScroll: true,\n      onChangeSync: true,\n      onKeyPressSync: true,\n      onTextInput: true,\n    }),\n  },\n};\n\nmodule.exports = (RCTTextInputViewConfig: PartialViewConfigWithoutName);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n// This class is responsible for coordinating the \"focused\" state for\n// TextInputs. All calls relating to the keyboard should be funneled\n// through here.\n\nconst React = require('react');\nconst Platform = require('../../Utilities/Platform');\nconst {findNodeHandle} = require('../../Renderer/shims/ReactNative');\nimport {Commands as AndroidTextInputCommands} from '../../Components/TextInput/AndroidTextInputNativeComponent';\nimport {Commands as iOSTextInputCommands} from '../../Components/TextInput/RCTSingelineTextInputNativeComponent';\n\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\ntype ComponentRef = React.ElementRef<HostComponent<mixed>>;\n\nlet currentlyFocusedInputRef: ?ComponentRef = null;\nconst inputs = new Set();\n\nfunction currentlyFocusedInput(): ?ComponentRef {\n  return currentlyFocusedInputRef;\n}\n\n/**\n * Returns the ID of the currently focused text field, if one exists\n * If no text field is focused it returns null\n */\nfunction currentlyFocusedField(): ?number {\n  if (__DEV__) {\n    console.error(\n      'currentlyFocusedField is deprecated and will be removed in a future release. Use currentlyFocusedInput',\n    );\n  }\n\n  return findNodeHandle(currentlyFocusedInputRef);\n}\n\nfunction focusInput(textField: ?ComponentRef): void {\n  if (currentlyFocusedInputRef !== textField && textField != null) {\n    currentlyFocusedInputRef = textField;\n  }\n}\n\nfunction blurInput(textField: ?ComponentRef): void {\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    currentlyFocusedInputRef = null;\n  }\n}\n\nfunction focusField(textFieldID: ?number): void {\n  if (__DEV__) {\n    console.error('focusField no longer works. Use focusInput');\n  }\n\n  return;\n}\n\nfunction blurField(textFieldID: ?number) {\n  if (__DEV__) {\n    console.error('blurField no longer works. Use blurInput');\n  }\n\n  return;\n}\n\n/**\n * @param {number} TextInputID id of the text field to focus\n * Focuses the specified text field\n * noop if the text field was already focused or if the field is not editable\n */\nfunction focusTextInput(textField: ?ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'focusTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  if (textField != null) {\n    const fieldCanBeFocused =\n      currentlyFocusedInputRef !== textField &&\n      // $FlowFixMe - `currentProps` is missing in `NativeMethods`\n      textField.currentProps?.editable !== false;\n\n    if (!fieldCanBeFocused) {\n      return;\n    }\n    focusInput(textField);\n    if (Platform.OS === 'ios') {\n      // This isn't necessarily a single line text input\n      // But commands don't actually care as long as the thing being passed in\n      // actually has a command with that name. So this should work with single\n      // and multiline text inputs. Ideally we'll merge them into one component\n      // in the future.\n      iOSTextInputCommands.focus(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.focus(textField);\n    }\n  }\n}\n\n/**\n * @param {number} textFieldID id of the text field to unfocus\n * Unfocuses the specified text field\n * noop if it wasn't focused\n */\nfunction blurTextInput(textField: ?ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'blurTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  if (currentlyFocusedInputRef === textField && textField != null) {\n    blurInput(textField);\n    if (Platform.OS === 'ios') {\n      // This isn't necessarily a single line text input\n      // But commands don't actually care as long as the thing being passed in\n      // actually has a command with that name. So this should work with single\n      // and multiline text inputs. Ideally we'll merge them into one component\n      // in the future.\n      iOSTextInputCommands.blur(textField);\n    } else if (Platform.OS === 'android') {\n      AndroidTextInputCommands.blur(textField);\n    }\n  }\n}\n\nfunction registerInput(textField: ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'registerInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n\n  inputs.add(textField);\n}\n\nfunction unregisterInput(textField: ComponentRef) {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'unregisterInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return;\n  }\n  inputs.delete(textField);\n}\n\nfunction isTextInput(textField: ComponentRef): boolean {\n  if (typeof textField === 'number') {\n    if (__DEV__) {\n      console.error(\n        'isTextInput must be called with a host component. Passing a react tag is deprecated.',\n      );\n    }\n\n    return false;\n  }\n\n  return inputs.has(textField);\n}\n\nmodule.exports = {\n  currentlyFocusedInput,\n  focusInput,\n  blurInput,\n\n  currentlyFocusedField,\n  focusField,\n  blurField,\n  focusTextInput,\n  blurTextInput,\n  registerInput,\n  unregisterInput,\n  isTextInput,\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nlet logListeners;\n\ntype LogListeners = {|\n  +onDifferentFunctionsIgnored: (nameOne: ?string, nameTwo: ?string) => void,\n|};\n\ntype Options = {|+unsafelyIgnoreFunctions?: boolean|};\n\nfunction unstable_setLogListeners(listeners: ?LogListeners) {\n  logListeners = listeners;\n}\n\n/*\n * @returns {bool} true if different, false if equal\n */\nconst deepDiffer = function (\n  one: any,\n  two: any,\n  maxDepthOrOptions: Options | number = -1,\n  maybeOptions?: Options,\n): boolean {\n  const options =\n    typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;\n  const maxDepth =\n    typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;\n  if (maxDepth === 0) {\n    return true;\n  }\n  if (one === two) {\n    // Short circuit on identical object references instead of traversing them.\n    return false;\n  }\n  if (typeof one === 'function' && typeof two === 'function') {\n    // We consider all functions equal unless explicitly configured otherwise\n    let unsafelyIgnoreFunctions = options?.unsafelyIgnoreFunctions;\n    if (unsafelyIgnoreFunctions == null) {\n      if (\n        logListeners &&\n        logListeners.onDifferentFunctionsIgnored &&\n        (!options || !('unsafelyIgnoreFunctions' in options))\n      ) {\n        logListeners.onDifferentFunctionsIgnored(one.name, two.name);\n      }\n      unsafelyIgnoreFunctions = true;\n    }\n    return !unsafelyIgnoreFunctions;\n  }\n  if (typeof one !== 'object' || one === null) {\n    // Primitives can be directly compared\n    return one !== two;\n  }\n  if (typeof two !== 'object' || two === null) {\n    // We know they are different because the previous case would have triggered\n    // otherwise.\n    return true;\n  }\n  if (one.constructor !== two.constructor) {\n    return true;\n  }\n  if (Array.isArray(one)) {\n    // We know two is also an array because the constructors are equal\n    const len = one.length;\n    if (two.length !== len) {\n      return true;\n    }\n    for (let ii = 0; ii < len; ii++) {\n      if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {\n        return true;\n      }\n    }\n  } else {\n    for (const key in one) {\n      if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {\n        return true;\n      }\n    }\n    for (const twoKey in two) {\n      // The only case we haven't checked yet is keys that are in two but aren't\n      // in one, which means they are different.\n      if (one[twoKey] === undefined && two[twoKey] !== undefined) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = deepDiffer;\nmodule.exports.unstable_setLogListeners = unstable_setLogListeners;\n"],"names":["Commands","codegenNativeCommands","supportedCommands","__INTERNAL_VIEW_CONFIG","uiViewClassName","bubblingEventTypes","topBlur","phasedRegistrationNames","bubbled","captured","topEndEditing","topFocus","topKeyPress","topSubmitEditing","topTextInput","directEventTypes","topScroll","registrationName","validAttributes","maxFontSizeMultiplier","adjustsFontSizeToFit","minimumFontScale","autoFocus","placeholder","inlineImagePadding","contextMenuHidden","textShadowColor","process","require","maxLength","selectTextOnFocus","textShadowRadius","underlineColorAndroid","textDecorationLine","blurOnSubmit","textAlignVertical","fontStyle","textShadowOffset","selectionColor","selection","placeholderTextColor","importantForAutofill","lineHeight","textTransform","returnKeyType","keyboardType","multiline","color","autoComplete","numberOfLines","letterSpacing","returnKeyLabel","fontSize","onKeyPress","cursorColor","text","showSoftInputOnFocus","textAlign","autoCapitalize","autoCorrect","caretHidden","secureTextEntry","textBreakStrategy","onScroll","onContentSizeChange","disableFullscreenUI","includeFontPadding","fontWeight","fontFamily","allowFontScaling","onSelectionChange","mostRecentEventCount","inlineImageLeft","editable","fontVariant","borderBottomRightRadius","borderBottomColor","borderRadius","borderRightColor","borderColor","borderTopRightRadius","borderStyle","borderBottomLeftRadius","borderLeftColor","borderTopLeftRadius","borderTopColor","AndroidTextInputNativeComponent","NativeComponentRegistry","get","RCTTextInputViewConfig","SinglelineTextInputNativeComponent","topChange","topContentSizeChange","topTouchCancel","topTouchEnd","topTouchMove","topKeyPressSync","topSelectionChange","topChangeSync","diff","isHighlighted","writingDirection","textDecorationStyle","textDecorationColor","inputAccessoryViewID","enablesReturnKeyAutomatically","clearButtonMode","scrollEnabled","textContentType","keyboardAppearance","passwordRules","spellCheck","clearTextOnFocus","ConditionallyIgnoredEventHandlers","onChange","onChangeSync","onKeyPressSync","onTextInput","module","exports","React","Platform","findNodeHandle","currentlyFocusedInputRef","inputs","Set","currentlyFocusedInput","currentlyFocusedField","__DEV__","console","error","focusInput","textField","blurInput","focusField","textFieldID","blurField","focusTextInput","fieldCanBeFocused","currentProps","OS","iOSTextInputCommands","focus","AndroidTextInputCommands","blurTextInput","blur","registerInput","add","unregisterInput","delete","isTextInput","has","logListeners","unstable_setLogListeners","listeners","deepDiffer","one","two","maxDepthOrOptions","maybeOptions","options","maxDepth","unsafelyIgnoreFunctions","onDifferentFunctionsIgnored","name","constructor","Array","isArray","len","length","ii","key","twoKey","undefined"],"sourceRoot":""}