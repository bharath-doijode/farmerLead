{"version":3,"file":"vendors-node_modules_react-native_Libraries_Image_AssetSourceResolver_js.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js","webpack:///./node_modules/react-native/Libraries/Image/AssetSourceResolver.js","webpack:///./node_modules/react-native/Libraries/Image/AssetUtils.js","webpack:///./node_modules/react-native/Libraries/Utilities/Dimensions.js","webpack:///./node_modules/react-native/Libraries/Utilities/NativeDeviceInfo.js","webpack:///./node_modules/react-native/Libraries/Utilities/PixelRatio.js","webpack:///./node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport type {IEventEmitter} from '../vendor/emitter/EventEmitter';\n\n// FIXME: use typed events\ntype RCTDeviceEventDefinitions = $FlowFixMe;\n\n/**\n * Global EventEmitter used by the native platform to emit events to JavaScript.\n * Events are identified by globally unique event names.\n *\n * NativeModules that emit events should instead subclass `NativeEventEmitter`.\n */\nexport default (new EventEmitter(): IEventEmitter<RCTDeviceEventDefinitions>);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from '@react-native/assets/registry';\n\nconst PixelRatio = require('../Utilities/PixelRatio');\nconst {pickScale} = require('./AssetUtils');\nconst Platform = require('../Utilities/Platform');\n\nconst invariant = require('invariant');\n\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n} = require('@react-native/assets/path-support');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawbleFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(\n      // Assets can have relative paths outside of the project root.\n      // When bundling them we replace `../` with `_` to make sure they\n      // don't end up outside of the expected assets directory.\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\n    );\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale: (scales: Array<number>, deviceScale?: number) => number =\n    pickScale;\n}\n\nmodule.exports = AssetSourceResolver;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport PixelRatio from '../Utilities/PixelRatio';\n\nlet cacheBreaker;\nlet warnIfCacheBreakerUnset = true;\n\nexport function pickScale(scales: Array<number>, deviceScale?: number): number {\n  if (deviceScale == null) {\n    deviceScale = PixelRatio.get();\n  }\n  // Packager guarantees that `scales` array is sorted\n  for (let i = 0; i < scales.length; i++) {\n    if (scales[i] >= deviceScale) {\n      return scales[i];\n    }\n  }\n\n  // If nothing matches, device scale is larger than any available\n  // scales, so we return the biggest one. Unless the array is empty,\n  // in which case we default to 1\n  return scales[scales.length - 1] || 1;\n}\n\nexport function setUrlCacheBreaker(appendage: string) {\n  cacheBreaker = appendage;\n}\n\nexport function getUrlCacheBreaker(): string {\n  if (cacheBreaker == null) {\n    if (__DEV__ && warnIfCacheBreakerUnset) {\n      warnIfCacheBreakerUnset = false;\n      console.warn(\n        'AssetUtils.getUrlCacheBreaker: Cache breaker value is unset',\n      );\n    }\n    return '';\n  }\n  return cacheBreaker;\n}\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeDeviceInfo, {\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n  type DimensionsPayload,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\nconst eventEmitter = new EventEmitter<{\n  change: [DimensionsPayload],\n}>();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsPayload;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preferred API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n   */\n  static get(dim: string): DisplayMetrics | DisplayMetricsAndroid {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<DimensionsPayload>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: 'change',\n    handler: Function,\n  ): EventSubscription {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    return eventEmitter.addListener(type, handler);\n  }\n}\n\nlet initialDims: ?$ReadOnly<DimensionsPayload> =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nif (!initialDims) {\n  // Subscribe before calling getConstants to make sure we don't miss any updates in between.\n  RCTDeviceEventEmitter.addListener(\n    'didUpdateDimensions',\n    (update: DimensionsPayload) => {\n      Dimensions.set(update);\n    },\n  );\n  initialDims = NativeDeviceInfo.getConstants().Dimensions;\n}\n\nDimensions.set(initialDims);\n\nmodule.exports = Dimensions;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../TurboModule/RCTExport';\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\n\nexport type DisplayMetricsAndroid = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n  densityDpi: number,\n|};\n\nexport type DisplayMetrics = {|\n  width: number,\n  height: number,\n  scale: number,\n  fontScale: number,\n|};\n\nexport type DimensionsPayload = {|\n  window?: DisplayMetrics,\n  screen?: DisplayMetrics,\n  windowPhysicalPixels?: DisplayMetricsAndroid,\n  screenPhysicalPixels?: DisplayMetricsAndroid,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => {|\n    +Dimensions: DimensionsPayload,\n    +isIPhoneX_deprecated?: boolean,\n  |};\n}\n\nconst NativeModule: Spec = TurboModuleRegistry.getEnforcing<Spec>('DeviceInfo');\nlet constants = null;\n\nconst NativeDeviceInfo = {\n  getConstants(): {|\n    +Dimensions: DimensionsPayload,\n    +isIPhoneX_deprecated?: boolean,\n  |} {\n    if (constants == null) {\n      constants = NativeModule.getConstants();\n    }\n    return constants;\n  },\n};\n\nexport default NativeDeviceInfo;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Dimensions = require('./Dimensions');\n\n/**\n * PixelRatio class gives access to the device pixel density.\n *\n * ## Fetching a correctly sized image\n *\n * You should get a higher resolution image if you are on a high pixel density\n * device. A good rule of thumb is to multiply the size of the image you display\n * by the pixel ratio.\n *\n * ```\n * var image = getImage({\n *   width: PixelRatio.getPixelSizeForLayoutSize(200),\n *   height: PixelRatio.getPixelSizeForLayoutSize(100),\n * });\n * <Image source={image} style={{width: 200, height: 100}} />\n * ```\n *\n * ## Pixel grid snapping\n *\n * In iOS, you can specify positions and dimensions for elements with arbitrary\n * precision, for example 29.674825. But, ultimately the physical display only\n * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334\n * for iPhone 6. iOS tries to be as faithful as possible to the user value by\n * spreading one original pixel into multiple ones to trick the eye. The\n * downside of this technique is that it makes the resulting element look\n * blurry.\n *\n * In practice, we found out that developers do not want this feature and they\n * have to work around it by doing manual rounding in order to avoid having\n * blurry elements. In React Native, we are rounding all the pixels\n * automatically.\n *\n * We have to be careful when to do this rounding. You never want to work with\n * rounded and unrounded values at the same time as you're going to accumulate\n * rounding errors. Having even one rounding error is deadly because a one\n * pixel border may vanish or be twice as big.\n *\n * In React Native, everything in JavaScript and within the layout engine works\n * with arbitrary precision numbers. It's only when we set the position and\n * dimensions of the native element on the main thread that we round. Also,\n * rounding is done relative to the root rather than the parent, again to avoid\n * accumulating rounding errors.\n *\n */\nclass PixelRatio {\n  /**\n   * Returns the device pixel density. Some examples:\n   *\n   *   - PixelRatio.get() === 1\n   *     - mdpi Android devices (160 dpi)\n   *   - PixelRatio.get() === 1.5\n   *     - hdpi Android devices (240 dpi)\n   *   - PixelRatio.get() === 2\n   *     - iPhone 4, 4S\n   *     - iPhone 5, 5c, 5s\n   *     - iPhone 6\n   *     - iPhone 7\n   *     - iPhone 8\n   *     - iPhone SE\n   *     - xhdpi Android devices (320 dpi)\n   *   - PixelRatio.get() === 3\n   *     - iPhone 6 Plus\n   *     - iPhone 7 Plus\n   *     - iPhone 8 Plus\n   *     - iPhone X\n   *     - xxhdpi Android devices (480 dpi)\n   *   - PixelRatio.get() === 3.5\n   *     - Nexus 6\n   */\n  static get(): number {\n    return Dimensions.get('window').scale;\n  }\n\n  /**\n   * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the\n   * absolute font size, so any elements that heavily depend on that should use this to do\n   * calculations.\n   *\n   * If a font scale is not set, this returns the device pixel ratio.\n   *\n   * This reflects the user preference set in:\n   *  - Settings > Display > Font size on Android,\n   *  - Settings > Display & Brightness > Text Size on iOS.\n   */\n  static getFontScale(): number {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   *\n   * Guaranteed to return an integer number.\n   */\n  static getPixelSizeForLayoutSize(layoutSize: number): number {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  static roundToNearestPixel(layoutSize: number): number {\n    const ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n  // No-op for iOS, but used on the web. Should not be documented.\n  static startDetecting() {}\n}\n\nmodule.exports = PixelRatio;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    const registrations = allocate(this._registry, eventType);\n    const registration: Registration<$ElementType<TEventToArgsMap, TEvent>> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    const registrations: ?Set<\n      Registration<$ElementType<TEventToArgsMap, TEvent>>,\n    > = this._registry[eventType];\n    if (registrations != null) {\n      for (const registration of [...registrations]) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this._registry = {};\n    } else {\n      delete this._registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this._registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: $ElementType<TEventToArgsMap, TEvent>,\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n"],"names":["EventEmitter","PixelRatio","require","pickScale","Platform","invariant","getAndroidResourceFolderName","getAndroidResourceIdentifier","getBasePath","getScaledAssetPath","asset","scale","scales","get","scaleSuffix","assetDir","name","type","getAssetPathInDrawableFolder","drawbleFolder","fileName","AssetSourceResolver","serverUrl","jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","path","replace","source","__packager_asset","width","height","uri","module","exports","cacheBreaker","warnIfCacheBreakerUnset","deviceScale","i","length","setUrlCacheBreaker","appendage","getUrlCacheBreaker","__DEV__","console","warn","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dim","dims","screen","window","windowPhysicalPixels","fontScale","screenPhysicalPixels","emit","handler","addListener","initialDims","global","nativeExtensions","DeviceInfo","RCTDeviceEventEmitter","update","set","NativeDeviceInfo","getConstants","NativeModule","TurboModuleRegistry","getEnforcing","constants","layoutSize","Math","round","ratio","_registry","eventType","listener","context","registrations","allocate","registration","remove","delete","add","args","apply","size","registry","Set"],"sourceRoot":""}