{"version":3,"file":"vendors-node_modules_react-native_Libraries_Alert_Alert_js-node_modules_react-native_Librarie-768780.chunk.bundle","mappings":"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","sources":["webpack:///./node_modules/react-native/Libraries/Alert/Alert.js","webpack:///./node_modules/react-native/Libraries/Alert/RCTAlertManager.android.js","webpack:///./node_modules/react-native/Libraries/AppState/AppState.js","webpack:///./node_modules/react-native/Libraries/AppState/NativeAppState.js","webpack:///./node_modules/react-native/Libraries/EventEmitter/RCTNativeAppEventEmitter.js","webpack:///./node_modules/react-native/Libraries/NativeModules/specs/NativeDevSettings.js","webpack:///./node_modules/react-native/Libraries/NativeModules/specs/NativeDialogManagerAndroid.js","webpack:///./node_modules/react-native/Libraries/Utilities/DevSettings.js","webpack:///./node_modules/react-native/Libraries/Utilities/logError.js","webpack:///./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/inherits.js","webpack:///./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack:///./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/typeof.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {DialogOptions} from '../NativeModules/specs/NativeDialogManagerAndroid';\n\nimport Platform from '../Utilities/Platform';\nimport RCTAlertManager from './RCTAlertManager';\n\nexport type AlertType =\n  | 'default'\n  | 'plain-text'\n  | 'secure-text'\n  | 'login-password';\nexport type AlertButtonStyle = 'default' | 'cancel' | 'destructive';\nexport type Buttons = Array<{\n  text?: string,\n  onPress?: ?Function,\n  style?: AlertButtonStyle,\n  ...\n}>;\n\ntype Options = {\n  cancelable?: ?boolean,\n  userInterfaceStyle?: 'unspecified' | 'light' | 'dark',\n  onDismiss?: ?() => void,\n  ...\n};\n\n/**\n * Launches an alert dialog with the specified title and message.\n *\n * See https://reactnative.dev/docs/alert\n */\nclass Alert {\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n  ): void {\n    if (Platform.OS === 'ios') {\n      Alert.prompt(\n        title,\n        message,\n        buttons,\n        'default',\n        undefined,\n        undefined,\n        options,\n      );\n    } else if (Platform.OS === 'android') {\n      const NativeDialogManagerAndroid =\n        require('../NativeModules/specs/NativeDialogManagerAndroid').default;\n      if (!NativeDialogManagerAndroid) {\n        return;\n      }\n      const constants = NativeDialogManagerAndroid.getConstants();\n\n      const config: DialogOptions = {\n        title: title || '',\n        message: message || '',\n        cancelable: false,\n      };\n\n      if (options && options.cancelable) {\n        config.cancelable = options.cancelable;\n      }\n      // At most three buttons (neutral, negative, positive). Ignore rest.\n      // The text 'OK' should be probably localized. iOS Alert does that in native.\n      const defaultPositiveText = 'OK';\n      const validButtons: Buttons = buttons\n        ? buttons.slice(0, 3)\n        : [{text: defaultPositiveText}];\n      const buttonPositive = validButtons.pop();\n      const buttonNegative = validButtons.pop();\n      const buttonNeutral = validButtons.pop();\n\n      if (buttonNeutral) {\n        config.buttonNeutral = buttonNeutral.text || '';\n      }\n      if (buttonNegative) {\n        config.buttonNegative = buttonNegative.text || '';\n      }\n      if (buttonPositive) {\n        config.buttonPositive = buttonPositive.text || defaultPositiveText;\n      }\n\n      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      const onAction = (action, buttonKey) => {\n        if (action === constants.buttonClicked) {\n          if (buttonKey === constants.buttonNeutral) {\n            buttonNeutral.onPress && buttonNeutral.onPress();\n          } else if (buttonKey === constants.buttonNegative) {\n            buttonNegative.onPress && buttonNegative.onPress();\n          } else if (buttonKey === constants.buttonPositive) {\n            buttonPositive.onPress && buttonPositive.onPress();\n          }\n        } else if (action === constants.dismissed) {\n          options && options.onDismiss && options.onDismiss();\n        }\n      };\n      const onError = (errorMessage: string) => console.warn(errorMessage);\n      NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n    }\n  }\n\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(((text: string) => void) | Buttons),\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string,\n    options?: Options,\n  ): void {\n    if (Platform.OS === 'ios') {\n      let callbacks = [];\n      const buttons = [];\n      let cancelButtonKey;\n      let destructiveButtonKey;\n      if (typeof callbackOrButtons === 'function') {\n        callbacks = [callbackOrButtons];\n      } else if (Array.isArray(callbackOrButtons)) {\n        callbackOrButtons.forEach((btn, index) => {\n          callbacks[index] = btn.onPress;\n          if (btn.style === 'cancel') {\n            cancelButtonKey = String(index);\n          } else if (btn.style === 'destructive') {\n            destructiveButtonKey = String(index);\n          }\n          if (btn.text || index < (callbackOrButtons || []).length - 1) {\n            const btnDef: {[number]: string} = {};\n            btnDef[index] = btn.text || '';\n            buttons.push(btnDef);\n          }\n        });\n      }\n\n      RCTAlertManager.alertWithArgs(\n        {\n          title: title || '',\n          message: message || undefined,\n          buttons,\n          type: type || undefined,\n          defaultValue,\n          cancelButtonKey,\n          destructiveButtonKey,\n          keyboardType,\n          userInterfaceStyle: options?.userInterfaceStyle || undefined,\n        },\n        (id, value) => {\n          const cb = callbacks[id];\n          cb && cb(value);\n        },\n      );\n    }\n  }\n}\n\nmodule.exports = Alert;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport NativeDialogManagerAndroid from '../NativeModules/specs/NativeDialogManagerAndroid';\n\nfunction emptyCallback() {}\n\nmodule.exports = {\n  alertWithArgs: function (args, callback) {\n    // TODO(5998984): Polyfill it correctly with DialogManagerAndroid\n    if (!NativeDialogManagerAndroid) {\n      return;\n    }\n\n    NativeDialogManagerAndroid.showAlert(\n      args,\n      emptyCallback,\n      callback || emptyCallback,\n    );\n  },\n};\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport logError from '../Utilities/logError';\nimport NativeAppState from './NativeAppState';\nimport Platform from '../Utilities/Platform';\n\nexport type AppStateValues = 'inactive' | 'background' | 'active';\n\ntype AppStateEventDefinitions = {\n  change: [AppStateValues],\n  memoryWarning: [],\n  blur: [],\n  focus: [],\n};\n\ntype NativeAppStateEventDefinitions = {\n  appStateDidChange: [{app_state: AppStateValues}],\n  appStateFocusChange: [boolean],\n  memoryWarning: [],\n};\n\n/**\n * `AppState` can tell you if the app is in the foreground or background,\n * and notify you when the state changes.\n *\n * See https://reactnative.dev/docs/appstate\n */\nclass AppState {\n  currentState: ?string = null;\n  isAvailable: boolean;\n\n  _emitter: ?NativeEventEmitter<NativeAppStateEventDefinitions>;\n\n  constructor() {\n    if (NativeAppState == null) {\n      this.isAvailable = false;\n    } else {\n      this.isAvailable = true;\n\n      const emitter: NativeEventEmitter<NativeAppStateEventDefinitions> =\n        new NativeEventEmitter(\n          // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n          // If you want to use the native module on other platforms, please remove this condition and test its behavior\n          Platform.OS !== 'ios' ? null : NativeAppState,\n        );\n      this._emitter = emitter;\n\n      this.currentState = NativeAppState.getConstants().initialAppState;\n\n      let eventUpdated = false;\n\n      // TODO: this is a terrible solution - in order to ensure `currentState`\n      // prop is up to date, we have to register an observer that updates it\n      // whenever the state changes, even if nobody cares. We should just\n      // deprecate the `currentState` property and get rid of this.\n      emitter.addListener('appStateDidChange', appStateData => {\n        eventUpdated = true;\n        this.currentState = appStateData.app_state;\n      });\n\n      // TODO: see above - this request just populates the value of `currentState`\n      // when the module is first initialized. Would be better to get rid of the\n      // prop and expose `getCurrentAppState` method directly.\n      // $FlowExpectedError[incompatible-call]\n      NativeAppState.getCurrentAppState(appStateData => {\n        // It's possible that the state will have changed here & listeners need to be notified\n        if (!eventUpdated && this.currentState !== appStateData.app_state) {\n          this.currentState = appStateData.app_state;\n          emitter.emit('appStateDidChange', appStateData);\n        }\n      }, logError);\n    }\n  }\n\n  // TODO: now that AppState is a subclass of NativeEventEmitter, we could\n  // deprecate `addEventListener` and `removeEventListener` and just use\n  // addListener` and `listener.remove()` directly. That will be a breaking\n  // change though, as both the method and event names are different\n  // (addListener events are currently required to be globally unique).\n  /**\n   * Add a handler to AppState changes by listening to the `change` event type\n   * and providing the handler.\n   *\n   * See https://reactnative.dev/docs/appstate#addeventlistener\n   */\n  addEventListener<K: $Keys<AppStateEventDefinitions>>(\n    type: K,\n    handler: (...$ElementType<AppStateEventDefinitions, K>) => void,\n  ): EventSubscription {\n    const emitter = this._emitter;\n    if (emitter == null) {\n      throw new Error('Cannot use AppState when `isAvailable` is false.');\n    }\n    switch (type) {\n      case 'change':\n        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type\n        const changeHandler: AppStateValues => void = handler;\n        return emitter.addListener('appStateDidChange', appStateData => {\n          changeHandler(appStateData.app_state);\n        });\n      case 'memoryWarning':\n        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type\n        const memoryWarningHandler: () => void = handler;\n        return emitter.addListener('memoryWarning', memoryWarningHandler);\n      case 'blur':\n      case 'focus':\n        // $FlowIssue[invalid-tuple-arity] Flow cannot refine handler based on the event type\n        const focusOrBlurHandler: () => void = handler;\n        return emitter.addListener('appStateFocusChange', hasFocus => {\n          if (type === 'blur' && !hasFocus) {\n            focusOrBlurHandler();\n          }\n          if (type === 'focus' && hasFocus) {\n            focusOrBlurHandler();\n          }\n        });\n    }\n    throw new Error('Trying to subscribe to unknown event: ' + type);\n  }\n}\n\nmodule.exports = (new AppState(): AppState);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {TurboModule} from '../TurboModule/RCTExport';\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => {|\n    initialAppState: string,\n  |};\n  +getCurrentAppState: (\n    success: (appState: {|app_state: string|}) => void,\n    error: (error: Object) => void,\n  ) => void;\n\n  // Events\n  +addListener: (eventName: string) => void;\n  +removeListeners: (count: number) => void;\n}\n\nexport default (TurboModuleRegistry.getEnforcing<Spec>('AppState'): Spec);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTNativeAppEventEmitter.\n */\nconst RCTNativeAppEventEmitter = RCTDeviceEventEmitter;\nmodule.exports = RCTNativeAppEventEmitter;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../TurboModule/RCTExport';\nimport * as TurboModuleRegistry from '../../TurboModule/TurboModuleRegistry';\n\nexport interface Spec extends TurboModule {\n  +reload: () => void;\n  +reloadWithReason?: (reason: string) => void;\n  +onFastRefresh?: () => void;\n  +setHotLoadingEnabled: (isHotLoadingEnabled: boolean) => void;\n  +setIsDebuggingRemotely: (isDebuggingRemotelyEnabled: boolean) => void;\n  +setProfilingEnabled: (isProfilingEnabled: boolean) => void;\n  +toggleElementInspector: () => void;\n  +addMenuItem: (title: string) => void;\n\n  // Events\n  +addListener: (eventName: string) => void;\n  +removeListeners: (count: number) => void;\n\n  // iOS only.\n  +setIsShakeToShowDevMenuEnabled: (enabled: boolean) => void;\n}\n\nexport default (TurboModuleRegistry.getEnforcing<Spec>('DevSettings'): Spec);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../TurboModule/RCTExport';\nimport * as TurboModuleRegistry from '../../TurboModule/TurboModuleRegistry';\n\n/* 'buttonClicked' | 'dismissed' */\ntype DialogAction = string;\n/*\n  buttonPositive = -1,\n  buttonNegative = -2,\n  buttonNeutral = -3\n*/\ntype DialogButtonKey = number;\nexport type DialogOptions = {|\n  title?: string,\n  message?: string,\n  buttonPositive?: string,\n  buttonNegative?: string,\n  buttonNeutral?: string,\n  items?: Array<string>,\n  cancelable?: boolean,\n|};\n\nexport interface Spec extends TurboModule {\n  +getConstants: () => {|\n    +buttonClicked: DialogAction,\n    +dismissed: DialogAction,\n    +buttonPositive: DialogButtonKey,\n    +buttonNegative: DialogButtonKey,\n    +buttonNeutral: DialogButtonKey,\n  |};\n  +showAlert: (\n    config: DialogOptions,\n    onError: (error: string) => void,\n    onAction: (action: DialogAction, buttonKey?: DialogButtonKey) => void,\n  ) => void;\n}\n\nexport default (TurboModuleRegistry.get<Spec>('DialogManagerAndroid'): ?Spec);\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport NativeDevSettings from '../NativeModules/specs/NativeDevSettings';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\n\nlet DevSettings: {\n  addMenuItem(title: string, handler: () => mixed): void,\n  reload(reason?: string): void,\n  onFastRefresh(): void,\n} = {\n  addMenuItem(title: string, handler: () => mixed): void {},\n  reload(reason?: string): void {},\n  onFastRefresh(): void {},\n};\n\ntype DevSettingsEventDefinitions = {\n  didPressMenuItem: [{title: string}],\n};\n\nif (__DEV__) {\n  const emitter = new NativeEventEmitter<DevSettingsEventDefinitions>(\n    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n    // If you want to use the native module on other platforms, please remove this condition and test its behavior\n    Platform.OS !== 'ios' ? null : NativeDevSettings,\n  );\n  const subscriptions = new Map();\n\n  DevSettings = {\n    addMenuItem(title: string, handler: () => mixed): void {\n      // Make sure items are not added multiple times. This can\n      // happen when hot reloading the module that registers the\n      // menu items. The title is used as the id which means we\n      // don't support multiple items with the same name.\n      let subscription = subscriptions.get(title);\n      if (subscription != null) {\n        subscription.remove();\n      } else {\n        NativeDevSettings.addMenuItem(title);\n      }\n\n      subscription = emitter.addListener('didPressMenuItem', event => {\n        if (event.title === title) {\n          handler();\n        }\n      });\n      subscriptions.set(title, subscription);\n    },\n    reload(reason?: string): void {\n      if (NativeDevSettings.reloadWithReason != null) {\n        NativeDevSettings.reloadWithReason(reason ?? 'Uncategorized from JS');\n      } else {\n        NativeDevSettings.reload();\n      }\n    },\n    onFastRefresh(): void {\n      NativeDevSettings.onFastRefresh?.();\n    },\n  };\n}\n\nmodule.exports = DevSettings;\n","/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\n/**\n * Small utility that can be used as an error handler. You cannot just pass\n * `console.error` as a failure callback - it's not properly bound.  If passes an\n * `Error` object, it will print the message and stack.\n */\nconst logError = function (...args: $ReadOnlyArray<mixed>) {\n  if (args.length === 1 && args[0] instanceof Error) {\n    const err = args[0];\n    console.error('Error: \"' + err.message + '\".  Stack:\\n' + err.stack);\n  } else {\n    console.error.apply(console, args);\n  }\n};\n\nmodule.exports = logError;\n","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["Alert","title","message","buttons","options","Platform","OS","prompt","undefined","NativeDialogManagerAndroid","require","default","constants","getConstants","config","cancelable","defaultPositiveText","validButtons","slice","text","buttonPositive","pop","buttonNegative","buttonNeutral","onAction","action","buttonKey","buttonClicked","onPress","dismissed","onDismiss","onError","errorMessage","console","warn","showAlert","callbackOrButtons","type","defaultValue","keyboardType","callbacks","cancelButtonKey","destructiveButtonKey","Array","isArray","forEach","btn","index","style","String","length","btnDef","push","RCTAlertManager","alertWithArgs","userInterfaceStyle","id","value","cb","module","exports","emptyCallback","args","callback","AppState","currentState","NativeAppState","isAvailable","emitter","NativeEventEmitter","_emitter","initialAppState","eventUpdated","addListener","appStateData","app_state","getCurrentAppState","emit","logError","handler","Error","changeHandler","memoryWarningHandler","focusOrBlurHandler","hasFocus","TurboModuleRegistry","getEnforcing","RCTNativeAppEventEmitter","RCTDeviceEventEmitter","get","DevSettings","addMenuItem","reload","reason","onFastRefresh","__DEV__","NativeDevSettings","subscriptions","Map","subscription","remove","event","set","reloadWithReason","err","error","stack","apply"],"sourceRoot":""}